apply plugin: 'maven'

// load properties
Properties properties = new Properties()
DataInputStream localDataInputStream = null
DataInputStream gradleDataInputStream = null

if (project.rootProject.file('local.properties').canRead()) {
    File localPropertiesFile = project.rootProject.file('local.properties')
    localDataInputStream = localPropertiesFile.newDataInputStream()
    properties.load(localDataInputStream)
}

if (project.rootProject.file("gradle.properties").canRead()) {
    File projectPropertiesFile = project.rootProject.file("gradle.properties")
    gradleDataInputStream = projectPropertiesFile.newDataInputStream()
    properties.load(gradleDataInputStream);
}

// read properties
def projectDescription = properties.getProperty("description")
def projectGroupId = properties.getProperty("groupId")
def projectArtifactId = properties.getProperty("artifactId")
def projectVersionName = properties.getProperty("versionName")
def projectPackaging = properties.getProperty("packaging")
def projectSiteUrl = properties.getProperty("siteUrl")
def projectGitUrl = properties.getProperty("gitUrl")

def developerId = properties.getProperty("developer.id")
def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")

def bintrayUser = properties.getProperty("bintray.user")
def bintrayApikey = properties.getProperty("bintray.apikey")
if (localDataInputStream != null) {
    localDataInputStream.close()
}
if (gradleDataInputStream != null) {
    gradleDataInputStream.close()
}

version = projectVersionName
group = projectGroupId

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'file://d:/repo')

            pom{
                project {
//                    groupId project.PUBLISH_GROUP_ID
//                    artifactId project.PUBLISH_ARTIFACT_ID
//                    version project.PUBLISH_VERSION
                }
            }
        }
    }
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
